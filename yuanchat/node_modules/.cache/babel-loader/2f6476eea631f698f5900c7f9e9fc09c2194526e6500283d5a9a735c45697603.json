{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"conversation-list-container\"\n};\nconst _hoisted_2 = [\"src\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[0] || (_cache[0] = _createElementVNode(\"h1\", null, \"最近会话\", -1 /* HOISTED */)), _createElementVNode(\"ul\", null, [_createCommentVNode(\" 渲染会话列表 \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.conversationList, conversation => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: conversation.id\n    }, [_createCommentVNode(\" 显示头像 \"), _createElementVNode(\"img\", {\n      src: $options.getAvatar(conversation),\n      alt: \"Avatar\",\n      class: \"avatar\"\n    }, null, 8 /* PROPS */, _hoisted_2), _createTextVNode(\" \" + _toDisplayString(conversation.name), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_createCommentVNode","_Fragment","_renderList","$data","conversationList","conversation","key","id","src","$options","getAvatar","alt","_hoisted_2","_createTextVNode","_toDisplayString","name"],"sources":["/Users/yaoxiao/Desktop/Trae/my-vue-app/src/components/ConversationList.vue"],"sourcesContent":["<template>\n  <div class=\"conversation-list-container\">\n    <h1>最近会话</h1>\n    <ul>\n      <!-- 渲染会话列表 -->\n      <li v-for=\"conversation in conversationList\" :key=\"conversation.id\">\n        <!-- 显示头像 -->\n        <img :src=\"getAvatar(conversation)\" alt=\"Avatar\" class=\"avatar\">\n        {{ conversation.name }}\n      </li>\n    </ul>\n  </div>\n</template>\n\n<script>\nimport { useStore } from 'vuex';\nimport NIM from 'nim-web-sdk-ng';\n\nexport default {\n  name: 'ConversationList',\n  data() {\n    return {\n      conversationList: [], // 存储会话列表数据\n      syncFinish: false,\n      nim: null\n    };\n  },\n  mounted() {\n    const store = useStore();\n    this.nim = store.state.nim;\n\n    if (!this.nim) {\n      const nimConfig = this.$store.state.nimConfig;\n      console.log(`=== NIM 初始化配置 ${nimConfig}`);\n      this.nim = NIM.getInstance({\n        appkey: nimConfig[0],\n        debugLevel: \"debug\",\n        apiVersion: \"v2\"\n      });\n      if (this.nim) {\n        this.$store.commit('setNim', this.nim);\n        console.log('=== NIM 已初始化');\n        if (this.nim.V2NIMLoginService) {\n          this.nim.V2NIMLoginService.login(nimConfig[1], nimConfig[2], {\n            \"forceMode\": false\n          }).then(() => {\n            console.log('=== 登录成功');\n          }).catch((err) => {\n            console.error('=== 登录失败:', err);\n          });\n        }\n\n      }\n    } else {\n      console.log('=== NIM 不需要初始化');\n    }\n    this.nim.V2NIMConversationService.on(\"onSyncFinished\", () => {\n      console.log('=== NIM 同步完成');\n      this.syncFinish = true;\n      this.getConversationList();\n    });\n  },\n  methods: {\n    async getConversationList() {\n      console.log('=== NIM 获取会话列表');\n      try {\n        const result = await this.nim.V2NIMConversationService.getConversationList(0, 100);\n        if (result) {\n          this.conversationList = result.conversationList;\n          for (let index = 0; index < result.conversationList.length; index++) {\n            const element = result.conversationList[index];\n            console.log(`=== ${element.name}`);\n          }\n        }\n      } catch (err) {\n        console.error(`=== 获取最近会话列表失败: ${err} ==`);\n      }\n    },\n    getAvatar(conversation) {\n      if (conversation.avatar) {\n        return conversation.avatar;\n      }\n      const initials = conversation.name.slice(0, 2).toUpperCase();\n      const canvas = document.createElement('canvas');\n      canvas.width = 40;\n      canvas.height = 40;\n      const ctx = canvas.getContext('2d');\n      ctx.fillStyle = '#ccc';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n      ctx.font = '20px Arial';\n      ctx.fillStyle = '#fff';\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      ctx.fillText(initials, canvas.width / 2, canvas.height / 2);\n      return canvas.toDataURL();\n    }\n  }\n};\n</script>\n\n<style scoped>\n/* 会话列表容器样式 */\n.conversation-list-container {\n  width: 33.33%; /* 占页面宽度的三分之一 */\n  float: left; /* 左浮动，使其他内容可以在右侧显示 */\n  box-sizing: border-box; /* 确保内边距和边框不会增加元素的实际宽度 */\n  padding: 10px; /* 可根据需要调整内边距 */\n}\n\n/* 头像样式 */\n.avatar {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  margin-right: 10px;\n  vertical-align: middle;\n}\n\n/* 全局样式 */\nbody {\n  font-family: Arial, sans-serif;\n}\n\n/* 标题样式 */\nh1 {\n  color: #333;\n  text-align: center;\n  margin-bottom: 20px;\n}\n\n/* 列表样式 */\nul {\n  list-style-type: none;\n  padding: 0;\n  margin: 0;\n}\n\n/* 列表项样式 */\nli {\n  padding: 15px;\n  border-bottom: 1px solid #e0e0e0;\n  text-align: left;\n  color: #333;\n  background-color: #f9f9f9;\n  transition: background-color 0.3s ease;\n}\n\n/* 鼠标悬停效果 */\nli:hover {\n  background-color: #e9e9e9;\n}\n</style>"],"mappings":";;EACOA,KAAK,EAAC;AAA6B;mBAD1C;;uBACEC,mBAAA,CAUM,OAVNC,UAUM,G,0BATJC,mBAAA,CAAa,YAAT,MAAI,sBACRA,mBAAA,CAOK,aANHC,mBAAA,YAAe,G,kBACfH,mBAAA,CAIKI,SAAA,QATXC,WAAA,CAKiCC,KAAA,CAAAC,gBAAgB,EAAhCC,YAAY;yBAAvBR,mBAAA,CAIK;MAJyCS,GAAG,EAAED,YAAY,CAACE;QAC9DP,mBAAA,UAAa,EACbD,mBAAA,CAAgE;MAA1DS,GAAG,EAAEC,QAAA,CAAAC,SAAS,CAACL,YAAY;MAAGM,GAAG,EAAC,QAAQ;MAACf,KAAK,EAAC;4BAP/DgB,UAAA,GAAAC,gBAAA,CAOwE,GAChE,GAAAC,gBAAA,CAAGT,YAAY,CAACU,IAAI,iB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}