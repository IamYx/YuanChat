{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, normalizeClass as _normalizeClass, vModelText as _vModelText, withKeys as _withKeys, withDirectives as _withDirectives } from \"vue\";\nconst _hoisted_1 = {\n  class: \"main-container\"\n};\nconst _hoisted_2 = {\n  class: \"conversation-list-container\"\n};\nconst _hoisted_3 = [\"onClick\"];\nconst _hoisted_4 = [\"src\"];\nconst _hoisted_5 = {\n  class: \"message-detail-container\"\n};\nconst _hoisted_6 = {\n  key: 0,\n  class: \"message-area\"\n};\nconst _hoisted_7 = {\n  class: \"conversation-header\"\n};\nconst _hoisted_8 = {\n  class: \"message-history\",\n  ref: \"messageHistory\"\n};\nconst _hoisted_9 = {\n  class: \"sender-info\"\n};\nconst _hoisted_10 = [\"src\"];\nconst _hoisted_11 = {\n  class: \"sender-name\"\n};\nconst _hoisted_12 = {\n  class: \"message-content\"\n};\nconst _hoisted_13 = {\n  class: \"message-time\"\n};\nconst _hoisted_14 = {\n  class: \"message-input-area\"\n};\nconst _hoisted_15 = {\n  key: 1,\n  class: \"empty-state\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createCommentVNode(\" 添加外层容器包裹两个区域 \"), _createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_cache[3] || (_cache[3] = _createElementVNode(\"h1\", null, \"最近会话\", -1 /* HOISTED */)), _createElementVNode(\"ul\", null, [_createCommentVNode(\" 渲染会话列表 \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.conversationList, conversation => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: conversation.id,\n      onClick: $event => {\n        $data.selectedConversation = conversation;\n        $options.loadMessages(conversation);\n      }\n    }, [_createCommentVNode(\" 显示头像 \"), _createElementVNode(\"img\", {\n      src: $options.getAvatar(conversation),\n      alt: \"Avatar\",\n      class: \"avatar\"\n    }, null, 8 /* PROPS */, _hoisted_4), _createTextVNode(\" \" + _toDisplayString(conversation.name), 1 /* TEXT */)], 8 /* PROPS */, _hoisted_3);\n  }), 128 /* KEYED_FRAGMENT */))])]), _createElementVNode(\"div\", _hoisted_5, [$data.selectedConversation ? (_openBlock(), _createElementBlock(\"div\", _hoisted_6, [_createCommentVNode(\" 新增会话标题 \"), _createElementVNode(\"div\", _hoisted_7, [$data.selectedConversation.conversationType === 1 ? (_openBlock(), _createElementBlock(_Fragment, {\n    key: 0\n  }, [_createCommentVNode(\" 假设1表示单聊 \"), _createTextVNode(\" 与 \" + _toDisplayString($data.selectedConversation.accountId) + \" 的对话 \", 1 /* TEXT */)], 64 /* STABLE_FRAGMENT */)) : $data.selectedConversation.conversationType === 2 ? (_openBlock(), _createElementBlock(_Fragment, {\n    key: 1\n  }, [_createCommentVNode(\" 假设2表示群聊 \"), _createTextVNode(\" 群聊：\" + _toDisplayString($data.selectedConversation.conversationId), 1 /* TEXT */)], 64 /* STABLE_FRAGMENT */)) : _createCommentVNode(\"v-if\", true)]), _createCommentVNode(\" 消息历史 \"), _createElementVNode(\"div\", _hoisted_8, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.currentMessages, (message, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: _normalizeClass([\"message-bubble\", {\n        'my-message': message.isOutgoing\n      }])\n    }, [_createCommentVNode(\" 发送者信息 \"), _createElementVNode(\"div\", _hoisted_9, [_createElementVNode(\"img\", {\n      src: $options.getUserAvatar(message.senderId),\n      class: \"message-avatar\"\n    }, null, 8 /* PROPS */, _hoisted_10), _createElementVNode(\"span\", _hoisted_11, _toDisplayString($options.getUserName(message.senderId)), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_12, _toDisplayString(message.content), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_13, _toDisplayString($options.formatTime(message.timestamp)), 1 /* TEXT */)], 2 /* CLASS */);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), _createCommentVNode(\" 消息发送框 \"), _createElementVNode(\"div\", _hoisted_14, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.newMessage = $event),\n    onKeyup: _cache[1] || (_cache[1] = _withKeys((...args) => $options.sendMessage && $options.sendMessage(...args), [\"enter\"])),\n    placeholder: \"输入消息...\"\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $data.newMessage]]), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.sendMessage && $options.sendMessage(...args))\n  }, \"发送\")])])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_15, \" 请选择会话开始聊天 \"))])])], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */);\n}","map":{"version":3,"names":["class","key","ref","_createElementBlock","_Fragment","_createCommentVNode","_createElementVNode","_hoisted_1","_hoisted_2","_renderList","$data","conversationList","conversation","id","onClick","$event","selectedConversation","$options","loadMessages","src","getAvatar","alt","_hoisted_4","_createTextVNode","_toDisplayString","name","_hoisted_3","_hoisted_5","_hoisted_6","_hoisted_7","conversationType","accountId","conversationId","_hoisted_8","currentMessages","message","index","_normalizeClass","isOutgoing","_hoisted_9","getUserAvatar","senderId","_hoisted_10","_hoisted_11","getUserName","_hoisted_12","content","_hoisted_13","formatTime","timestamp","_hoisted_14","_cache","newMessage","onKeyup","_withKeys","args","sendMessage","placeholder","_hoisted_15"],"sources":["/Users/yaoxiao/Desktop/Trae/my-vue-app/src/components/ConversationList.vue"],"sourcesContent":["<template>\n  <!-- 添加外层容器包裹两个区域 -->\n  <div class=\"main-container\">\n    <div class=\"conversation-list-container\">\n      <h1>最近会话</h1>\n      <ul>\n        <!-- 渲染会话列表 -->\n        <li v-for=\"conversation in conversationList\" :key=\"conversation.id\" \n            @click=\"selectedConversation = conversation; loadMessages(conversation)\">\n          <!-- 显示头像 -->\n          <img :src=\"getAvatar(conversation)\" alt=\"Avatar\" class=\"avatar\">\n          {{ conversation.name }}\n        </li>\n      </ul>\n    </div>\n  \n    <div class=\"message-detail-container\">\n      <div v-if=\"selectedConversation\" class=\"message-area\">\n        <!-- 新增会话标题 -->\n        <div class=\"conversation-header\">\n          <template v-if=\"selectedConversation.conversationType === 1\"> <!-- 假设1表示单聊 -->\n            与 {{ selectedConversation.accountId }} 的对话\n          </template>\n          <template v-else-if=\"selectedConversation.conversationType === 2\"> <!-- 假设2表示群聊 -->\n            群聊：{{ selectedConversation.conversationId }}\n          </template>\n        </div>\n        \n        <!-- 消息历史 -->\n        <div class=\"message-history\" ref=\"messageHistory\">\n          <div v-for=\"(message, index) in currentMessages\" :key=\"index\" \n               class=\"message-bubble\" :class=\"{ 'my-message': message.isOutgoing }\">\n            <!-- 发送者信息 -->\n            <div class=\"sender-info\">\n              <img :src=\"getUserAvatar(message.senderId)\" class=\"message-avatar\">\n              <span class=\"sender-name\">{{ getUserName(message.senderId) }}</span>\n            </div>\n            <div class=\"message-content\">{{ message.content }}</div>\n            <div class=\"message-time\">{{ formatTime(message.timestamp) }}</div>\n          </div>\n        </div>\n        \n        <!-- 消息发送框 -->\n        <div class=\"message-input-area\">\n          <input v-model=\"newMessage\" @keyup.enter=\"sendMessage\" \n                 placeholder=\"输入消息...\">\n          <button @click=\"sendMessage\">发送</button>\n        </div>\n      </div>\n      \n      <div v-else class=\"empty-state\">\n        请选择会话开始聊天\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { useStore } from 'vuex';\nimport NIM from 'nim-web-sdk-ng';\nimport dayjs from 'dayjs'\n\nexport default {\n  name: 'ConversationList',\n  data() {\n    return {\n      conversationList: [], // 存储会话列表数据\n      syncFinish: false,\n      nim: null,\n      selectedConversation: null,\n      currentMessages: [],\n      newMessage: '',\n      // 新增用户信息缓存\n      userInfoCache: new Map(),\n    };\n  },\n  mounted() {\n    const store = useStore();\n    this.nim = store.state.nim;\n\n    if (!this.nim) {\n      const nimConfig = this.$store.state.nimConfig;\n      console.log(`=== NIM 初始化配置 ${nimConfig}`);\n      this.nim = NIM.getInstance({\n        appkey: nimConfig[0],\n        debugLevel: \"debug\",\n        apiVersion: \"v2\"\n      });\n      if (this.nim) {\n        this.$store.commit('setNim', this.nim);\n        console.log('=== NIM 已初始化');\n        if (this.nim.V2NIMLoginService) {\n          this.nim.V2NIMLoginService.login(nimConfig[1], nimConfig[2], {\n            \"forceMode\": false\n          }).then(() => {\n            console.log('=== 登录成功');\n          }).catch((err) => {\n            console.error('=== 登录失败:', err);\n          });\n        }\n\n      }\n    } else {\n      console.log('=== NIM 不需要初始化');\n    }\n    this.nim.V2NIMConversationService.on(\"onSyncFinished\", () => {\n      console.log('=== NIM 同步完成');\n      this.syncFinish = true;\n      this.getConversationList();\n    });\n  },\n  methods: {\n    async getConversationList() {\n      console.log('=== NIM 获取会话列表');\n      try {\n        const result = await this.nim.V2NIMConversationService.getConversationList(0, 100);\n        if (result) {\n          this.conversationList = result.conversationList;\n          for (let index = 0; index < result.conversationList.length; index++) {\n            const element = result.conversationList[index];\n            console.log(`=== ${element.name}`);\n          }\n        }\n      } catch (err) {\n        console.error(`=== 获取最近会话列表失败: ${err} ==`);\n      }\n    },\n\n    getAvatar(conversation) {\n      if (conversation.avatar) {\n        return conversation.avatar;\n      }\n      const initials = conversation.name.slice(0, 2).toUpperCase();\n      const canvas = document.createElement('canvas');\n      canvas.width = 40;\n      canvas.height = 40;\n      const ctx = canvas.getContext('2d');\n      ctx.fillStyle = '#ccc';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n      ctx.font = '20px Arial';\n      ctx.fillStyle = '#fff';\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      ctx.fillText(initials, canvas.width / 2, canvas.height / 2);\n      return canvas.toDataURL();\n    },\n\n    // 新增用户信息获取方法\n    async fetchUserInfo(userId) {\n      if (!this.userInfoCache.has(userId)) {\n        try {\n          console.log('=== 获取用户信息:', userId);\n          const users = await this.nim.V2NIMUserService.getUserList([userId]);\n          this.userInfoCache.set(userId, users[0]);\n        } catch (err) {\n          console.error('=== 获取用户信息失败:', err);\n          this.userInfoCache.set(userId, { \n            name: `用户${userId.slice(-4)}`,\n            avatar: this.generateDefaultAvatar(userId)\n          });\n        }\n      }\n      return this.userInfoCache.get(userId);\n    },\n    \n    // 生成默认头像\n    generateDefaultAvatar(userId) {\n      const canvas = document.createElement('canvas');\n      canvas.width = 40;\n      canvas.height = 40;\n      const ctx = canvas.getContext('2d');\n      ctx.fillStyle = '#ccc';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n      ctx.font = '16px Arial';\n      ctx.fillStyle = '#fff';\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      ctx.fillText(userId.slice(-2), canvas.width/2, canvas.height/2);\n      return canvas.toDataURL();\n    },\n    \n    // 获取用户头像\n    getUserAvatar(userId) {\n      return this.userInfoCache.get(userId)?.avatar || this.generateDefaultAvatar(userId);\n    },\n    \n    // 获取用户名\n    getUserName(userId) {\n      return this.userInfoCache.get(userId)?.name || `用户${userId.slice(-4)}`;\n    },\n    \n    async loadMessages(conversation) {\n      try {\n        const result = await this.nim.V2NIMMessageService.getMessageList({\n          conversationId: conversation.conversationId,\n          limit: 50,\n        });\n        \n        // 批量获取用户信息\n        const uniqueUserIds = [...new Set(result.map(msg => msg.senderId))];\n        console.log(`=== 批量获取用户信息：${uniqueUserIds}`)\n        await Promise.all(uniqueUserIds.map(userId => this.fetchUserInfo(userId)));\n        \n        this.currentMessages = result.map(msg => ({\n          content: msg.text,\n          timestamp: msg.createTime,\n          isOutgoing: msg.isSelf,\n          senderId: msg.senderId\n        })).reverse();\n\n        // 新增加载后滚动\n        this.$nextTick(() => {\n          const container = this.$refs.messageHistory;\n          if (container) {\n            container.scrollTop = container.scrollHeight;\n          }\n        });\n      } catch (err) {\n        console.error('=== 加载消息失败:', err.detail);\n      }\n    },\n    \n    async sendMessage() {\n      if (!this.newMessage.trim()) return;\n      \n      const message = this.nim.V2NIMMessageCreator.createTextMessage(this.newMessage);\n      try {\n        await this.nim.V2NIMMessageService.sendMessage(message, this.selectedConversation.conversationId);\n\n          // 本地临时显示\n        console.log('=== 发送消息失败:', this.nim.V2NIMLoginService.userId);\n        this.currentMessages.push({\n              content: message.text,\n              timestamp: message.createTime,\n              isOutgoing: true,\n              senderId: this.nim.V2NIMLoginService.getLoginUser()\n        });\n        this.newMessage = '';\n\n       // 新增滚动到底部逻辑\n        this.$nextTick(() => {\n          const container = this.$refs.messageHistory;\n          if (container) {\n            container.scrollTop = container.scrollHeight;\n          }\n        });\n        \n      } catch(err) {\n        console.error('=== 发送消息失败:', err.detail);\n      }\n    },\n    \n    formatTime(timestamp) {\n      return dayjs(timestamp).format('HH:mm');\n    }\n  }\n}\n</script>\n\n<style scoped>\n/* 新增外层容器样式 */\n.main-container {\n  display: flex;\n  height: 90vh; /* 恢复全屏高度 */\n}\n\n/* 会话列表容器 */\n.conversation-list-container {\n  width: 33.33%;\n  overflow-y: auto; /* 仅会话列表滚动 */\n  height: 100%;     /* 继承外层高度 */\n}\n\n/* 消息详情容器 */\n.message-detail-container {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  height: 100%; /* 继承外层高度 */\n}\n\n/* 消息区域 */\n.message-area {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden; /* 防止内容溢出 */\n}\n\n/* 消息历史 */\n.message-history {\n  flex: 1;\n  overflow-y: auto;\n  padding: 20px;\n  display: flex;          /* 新增 */\n  flex-direction: column; /* 新增 */\n}\n\n/* 消息气泡新增样式 */\n.message-bubble {\n  max-width: 70%;\n  min-width: 60px;\n  margin: 8px 0;\n  padding: 12px 16px;\n  border-radius: 18px;\n  background: #f0f0f0;\n  margin-right: auto;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\n.message-bubble.my-message {\n  background: #0084ff;\n  color: white;\n  margin-left: auto;\n  margin-right: 0;\n}\n\n/* 发送者信息样式 */\n.sender-info {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  margin-bottom: 4px;\n}\n\n.message-avatar {\n  width: 24px;\n  height: 24px;\n  border-radius: 50%;\n  object-fit: cover;\n}\n\n.sender-name {\n  font-size: 12px;\n  color: #666;\n}\n\n/* 新增右侧消息发送者样式 */\n.message-bubble.my-message .sender-name {\n  color: rgba(255, 255, 255, 0.9); /* 使用半透明白色 */\n}\n\n/* 调整右侧消息文字颜色 */\n.message-bubble.my-message .message-content {\n  color: white;\n}\n\n.message-bubble.my-message .message-time {\n  color: rgba(255, 255, 255, 0.8);\n}\n\n/* 修复输入框嵌套样式问题（Vue scoped样式不支持嵌套写法） */\n.message-input-area {\n  padding: 0 20px 20px; /* 添加左右间距 */\n  display: flex;\n  gap: 10px;\n}\n\n.message-input-area input {\n  flex: 1;\n  padding: 12px 16px;\n  border: 1px solid #ddd;\n  border-radius: 20px;\n  padding-right: 80px; /* 为按钮预留空间 */\n}\n\n.message-input-area button {\n  position: absolute;\n  right: 30px; /* 与容器右间距对齐 */\n  bottom: 30px; /* 与容器底部间距对齐 */\n  padding: 10px 20px;\n  background: #0084ff;\n  color: white;\n  border: none;\n  border-radius: 18px;\n  cursor: pointer;\n  transition: opacity 0.2s;\n}\n\n.message-input-area button:hover {\n  opacity: 0.9;\n}\n\n.empty-state {\n  display: flex;\n  height: 100%;\n  align-items: center;\n  justify-content: center;\n  color: #999;\n}\n\n/* 头像样式 */\n.avatar {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  margin-right: 10px;\n  vertical-align: middle;\n  object-fit: cover; /* 新增图片裁剪方式 */\n  flex-shrink: 0;    /* 防止头像被压缩 */\n}\n\n/* 列表项样式 */\nli {\n  padding: 10px 15px; /* 调整内边距 */\n  display: flex;      /* 启用flex布局 */\n  align-items: center;/* 垂直居中 */\n  gap: 10px;         /* 元素间距 */\n  border-bottom: 1px solid #e0e0e0;\n  color: #333;\n  background-color: #f9f9f9;\n  transition: background-color 0.3s ease;\n}\n\n/* 文字容器添加弹性布局 */\nli > span {\n  flex: 1;\n  text-align: left;  /* 保证文字居左 */\n}\n\n.message-content {\n  word-break: break-word;\n}\n\n.message-time {\n  font-size: 12px;\n  margin-top: 4px;\n  text-align: right; /* 时间始终右对齐 */\n}\n\n/* 新增会话标题样式 */\n.conversation-header {\npadding: 16px 20px;\nfont-size: 18px;\nfont-weight: 500;\nborder-bottom: 1px solid #e0e0e0;\nbackground: #f8f9fa;\n}\n\n/* 调整消息历史容器高度 */\n.message-history {\nheight: calc(100% - 120px); /* 为标题和输入框预留空间 */\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}