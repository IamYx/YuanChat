{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, normalizeClass as _normalizeClass, vModelText as _vModelText, withKeys as _withKeys, withDirectives as _withDirectives } from \"vue\";\nconst _hoisted_1 = {\n  class: \"conversation-list-container\"\n};\nconst _hoisted_2 = [\"src\"];\nconst _hoisted_3 = {\n  class: \"message-detail-container\"\n};\nconst _hoisted_4 = {\n  key: 0,\n  class: \"message-area\"\n};\nconst _hoisted_5 = {\n  class: \"message-history\"\n};\nconst _hoisted_6 = {\n  class: \"message-content\"\n};\nconst _hoisted_7 = {\n  class: \"message-time\"\n};\nconst _hoisted_8 = {\n  class: \"message-input-area\"\n};\nconst _hoisted_9 = {\n  key: 1,\n  class: \"empty-state\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"div\", _hoisted_1, [_cache[3] || (_cache[3] = _createElementVNode(\"h1\", null, \"最近会话\", -1 /* HOISTED */)), _createElementVNode(\"ul\", null, [_createCommentVNode(\" 渲染会话列表 \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.conversationList, conversation => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: conversation.id\n    }, [_createCommentVNode(\" 显示头像 \"), _createElementVNode(\"img\", {\n      src: $options.getAvatar(conversation),\n      alt: \"Avatar\",\n      class: \"avatar\"\n    }, null, 8 /* PROPS */, _hoisted_2), _createTextVNode(\" \" + _toDisplayString(conversation.name), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])]), _createCommentVNode(\" 新增消息详情区域 \"), _createElementVNode(\"div\", _hoisted_3, [$data.selectedConversation ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_createCommentVNode(\" 消息历史 \"), _createElementVNode(\"div\", _hoisted_5, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.currentMessages, (message, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: _normalizeClass([\"message-bubble\", {\n        'my-message': message.isOutgoing\n      }])\n    }, [_createElementVNode(\"div\", _hoisted_6, _toDisplayString(message.content), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_7, _toDisplayString($options.formatTime(message.timestamp)), 1 /* TEXT */)], 2 /* CLASS */);\n  }), 128 /* KEYED_FRAGMENT */))]), _createCommentVNode(\" 消息发送框 \"), _createElementVNode(\"div\", _hoisted_8, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.newMessage = $event),\n    onKeyup: _cache[1] || (_cache[1] = _withKeys((...args) => $options.sendMessage && $options.sendMessage(...args), [\"enter\"])),\n    placeholder: \"输入消息...\"\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $data.newMessage]]), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.sendMessage && $options.sendMessage(...args))\n  }, \"发送\")])])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_9, \" 请选择会话开始聊天 \"))])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_Fragment","_createElementVNode","_hoisted_1","_createCommentVNode","_renderList","$data","conversationList","conversation","id","src","$options","getAvatar","alt","_hoisted_2","_createTextVNode","_toDisplayString","name","_hoisted_3","selectedConversation","_hoisted_4","_hoisted_5","currentMessages","message","index","_normalizeClass","isOutgoing","_hoisted_6","content","_hoisted_7","formatTime","timestamp","_hoisted_8","_cache","$event","newMessage","onKeyup","_withKeys","args","sendMessage","placeholder","onClick","_hoisted_9"],"sources":["/Users/yaoxiao/Desktop/Trae/my-vue-app/src/components/ConversationList.vue"],"sourcesContent":["<template>\n  <div class=\"conversation-list-container\">\n    <h1>最近会话</h1>\n    <ul>\n      <!-- 渲染会话列表 -->\n      <li v-for=\"conversation in conversationList\" :key=\"conversation.id\">\n        <!-- 显示头像 -->\n        <img :src=\"getAvatar(conversation)\" alt=\"Avatar\" class=\"avatar\">\n        {{ conversation.name }}\n      </li>\n    </ul>\n  </div>\n  \n  <!-- 新增消息详情区域 -->\n  <div class=\"message-detail-container\">\n    <div v-if=\"selectedConversation\" class=\"message-area\">\n      <!-- 消息历史 -->\n      <div class=\"message-history\">\n        <div v-for=\"(message, index) in currentMessages\" :key=\"index\" \n             class=\"message-bubble\" :class=\"{ 'my-message': message.isOutgoing }\">\n          <div class=\"message-content\">{{ message.content }}</div>\n          <div class=\"message-time\">{{ formatTime(message.timestamp) }}</div>\n        </div>\n      </div>\n      \n      <!-- 消息发送框 -->\n      <div class=\"message-input-area\">\n        <input v-model=\"newMessage\" @keyup.enter=\"sendMessage\" \n               placeholder=\"输入消息...\">\n        <button @click=\"sendMessage\">发送</button>\n      </div>\n    </div>\n    \n    <div v-else class=\"empty-state\">\n      请选择会话开始聊天\n    </div>\n  </div>\n</template>\n\n<script>\nimport { useStore } from 'vuex';\nimport NIM from 'nim-web-sdk-ng';\nimport dayjs from 'dayjs'\n\nexport default {\n  name: 'ConversationList',\n  data() {\n    return {\n      conversationList: [], // 存储会话列表数据\n      syncFinish: false,\n      nim: null,\n      selectedConversation: null,\n      currentMessages: [],\n      newMessage: ''\n    };\n  },\n  mounted() {\n    const store = useStore();\n    this.nim = store.state.nim;\n\n    if (!this.nim) {\n      const nimConfig = this.$store.state.nimConfig;\n      console.log(`=== NIM 初始化配置 ${nimConfig}`);\n      this.nim = NIM.getInstance({\n        appkey: nimConfig[0],\n        debugLevel: \"debug\",\n        apiVersion: \"v2\"\n      });\n      if (this.nim) {\n        this.$store.commit('setNim', this.nim);\n        console.log('=== NIM 已初始化');\n        if (this.nim.V2NIMLoginService) {\n          this.nim.V2NIMLoginService.login(nimConfig[1], nimConfig[2], {\n            \"forceMode\": false\n          }).then(() => {\n            console.log('=== 登录成功');\n          }).catch((err) => {\n            console.error('=== 登录失败:', err);\n          });\n        }\n\n      }\n    } else {\n      console.log('=== NIM 不需要初始化');\n    }\n    this.nim.V2NIMConversationService.on(\"onSyncFinished\", () => {\n      console.log('=== NIM 同步完成');\n      this.syncFinish = true;\n      this.getConversationList();\n    });\n  },\n  methods: {\n    async getConversationList() {\n      console.log('=== NIM 获取会话列表');\n      try {\n        const result = await this.nim.V2NIMConversationService.getConversationList(0, 100);\n        if (result) {\n          this.conversationList = result.conversationList;\n          for (let index = 0; index < result.conversationList.length; index++) {\n            const element = result.conversationList[index];\n            console.log(`=== ${element.name}`);\n          }\n        }\n      } catch (err) {\n        console.error(`=== 获取最近会话列表失败: ${err} ==`);\n      }\n    },\n\n    getAvatar(conversation) {\n      if (conversation.avatar) {\n        return conversation.avatar;\n      }\n      const initials = conversation.name.slice(0, 2).toUpperCase();\n      const canvas = document.createElement('canvas');\n      canvas.width = 40;\n      canvas.height = 40;\n      const ctx = canvas.getContext('2d');\n      ctx.fillStyle = '#ccc';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n      ctx.font = '20px Arial';\n      ctx.fillStyle = '#fff';\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      ctx.fillText(initials, canvas.width / 2, canvas.height / 2);\n      return canvas.toDataURL();\n    },\n    \n    async loadMessages(conversation) {\n      try {\n        const result = await this.nim.V2NIMMessageService.queryMessageList({\n          sessionId: conversation.sessionId,\n          sessionType: conversation.sessionType,\n          limit: 100\n        });\n        this.currentMessages = result.messageList.map(msg => ({\n          content: msg.content,\n          timestamp: msg.timestamp,\n          isOutgoing: msg.isOutgoing\n        }));\n      } catch (err) {\n        console.error('加载消息失败:', err);\n      }\n    },\n    \n    sendMessage() {\n      if (!this.newMessage.trim()) return;\n      \n      const message = {\n        sessionId: this.selectedConversation.sessionId,\n        sessionType: this.selectedConversation.sessionType,\n        content: this.newMessage,\n        timestamp: Date.now(),\n        isOutgoing: true\n      }\n      \n      // 调用SDK发送消息\n      this.nim.V2NIMMessageService.sendMessage(message);\n      \n      // 本地临时显示\n      this.currentMessages.push(message);\n      this.newMessage = '';\n    },\n    \n    formatTime(timestamp) {\n      return dayjs(timestamp).format('HH:mm');\n    }\n  }\n}\n</script>\n\n<style scoped>\n/* 会话列表容器样式 */\n.conversation-list-container {\n  width: 33.33%; /* 占页面宽度的三分之一 */\n  float: left; /* 左浮动，使其他内容可以在右侧显示 */\n  box-sizing: border-box; /* 确保内边距和边框不会增加元素的实际宽度 */\n  padding: 10px; /* 可根据需要调整内边距 */\n}\n\n/* 头像样式 */\n.avatar {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  margin-right: 10px;\n  vertical-align: middle;\n}\n\n/* 全局样式 */\nbody {\n  font-family: Arial, sans-serif;\n}\n\n/* 标题样式 */\nh1 {\n  color: #333;\n  text-align: center;\n  margin-bottom: 20px;\n}\n\n/* 列表样式 */\nul {\n  list-style-type: none;\n  padding: 0;\n  margin: 0;\n}\n\n/* 列表项样式 */\nli {\n  padding: 15px;\n  border-bottom: 1px solid #e0e0e0;\n  text-align: left;\n  color: #333;\n  background-color: #f9f9f9;\n  transition: background-color 0.3s ease;\n}\n\n/* 鼠标悬停效果 */\nli:hover {\n  background-color: #e9e9e9;\n}\n\n/* 新增消息区域样式 */\n.message-detail-container {\n  width: 66.66%;\n  float: left;\n  height: 100vh;\n  background: #fff;\n  border-left: 1px solid #e0e0e0;\n}\n\n.message-history {\n  height: calc(100vh - 120px);\n  overflow-y: auto;\n  padding: 20px;\n}\n\n.message-bubble {\n  margin: 10px 0;\n  max-width: 70%;\n  padding: 12px 16px;\n  border-radius: 18px;\n  background: #f1f0f0;\n}\n\n.my-message {\n  margin-left: auto;\n  background: #0084ff;\n  color: white;\n}\n\n.message-content {\n  word-break: break-word;\n}\n\n.message-time {\n  font-size: 12px;\n  color: #666;\n  margin-top: 4px;\n}\n\n.message-input-area {\n  padding: 20px;\n  display: flex;\n  gap: 10px;\n  border-top: 1px solid #eee;\n  \n  input {\n    flex: 1;\n    padding: 12px;\n    border: 1px solid #ddd;\n    border-radius: 20px;\n  }\n  \n  button {\n    padding: 12px 24px;\n    background: #0084ff;\n    color: white;\n    border: none;\n    border-radius: 20px;\n    cursor: pointer;\n  }\n}\n\n.empty-state {\n  display: flex;\n  height: 100%;\n  align-items: center;\n  justify-content: center;\n  color: #999;\n}\n</style>"],"mappings":";;EACOA,KAAK,EAAC;AAA6B;mBAD1C;;EAcOA,KAAK,EAAC;AAA0B;;EAdvCC,GAAA;EAeqCD,KAAK,EAAC;;;EAEhCA,KAAK,EAAC;AAAiB;;EAGnBA,KAAK,EAAC;AAAiB;;EACvBA,KAAK,EAAC;AAAc;;EAKxBA,KAAK,EAAC;AAAoB;;EA1BrCC,GAAA;EAiCgBD,KAAK,EAAC;;;uBAjCtBE,mBAAA,CAAAC,SAAA,SACEC,mBAAA,CAUM,OAVNC,UAUM,G,0BATJD,mBAAA,CAAa,YAAT,MAAI,sBACRA,mBAAA,CAOK,aANHE,mBAAA,YAAe,G,kBACfJ,mBAAA,CAIKC,SAAA,QATXI,WAAA,CAKiCC,KAAA,CAAAC,gBAAgB,EAAhCC,YAAY;yBAAvBR,mBAAA,CAIK;MAJyCD,GAAG,EAAES,YAAY,CAACC;QAC9DL,mBAAA,UAAa,EACbF,mBAAA,CAAgE;MAA1DQ,GAAG,EAAEC,QAAA,CAAAC,SAAS,CAACJ,YAAY;MAAGK,GAAG,EAAC,QAAQ;MAACf,KAAK,EAAC;4BAP/DgB,UAAA,GAAAC,gBAAA,CAOwE,GAChE,GAAAC,gBAAA,CAAGR,YAAY,CAACS,IAAI,iB;sCAK1Bb,mBAAA,cAAiB,EACjBF,mBAAA,CAsBM,OAtBNgB,UAsBM,GArBOZ,KAAA,CAAAa,oBAAoB,I,cAA/BnB,mBAAA,CAgBM,OAhBNoB,UAgBM,GAfJhB,mBAAA,UAAa,EACbF,mBAAA,CAMM,OANNmB,UAMM,I,kBALJrB,mBAAA,CAIMC,SAAA,QAtBdI,WAAA,CAkBwCC,KAAA,CAAAgB,eAAe,EAlBvD,CAkBqBC,OAAO,EAAEC,KAAK;yBAA3BxB,mBAAA,CAIM;MAJ4CD,GAAG,EAAEyB,KAAK;MACvD1B,KAAK,EAnBlB2B,eAAA,EAmBmB,gBAAgB;QAAA,cAAyBF,OAAO,CAACG;MAAU;QACpExB,mBAAA,CAAwD,OAAxDyB,UAAwD,EAAAX,gBAAA,CAAxBO,OAAO,CAACK,OAAO,kBAC/C1B,mBAAA,CAAmE,OAAnE2B,UAAmE,EAAAb,gBAAA,CAAtCL,QAAA,CAAAmB,UAAU,CAACP,OAAO,CAACQ,SAAS,kB;oCAI7D3B,mBAAA,WAAc,EACdF,mBAAA,CAIM,OAJN8B,UAIM,G,gBAHJ9B,mBAAA,CAC6B;IA5BrC,uBAAA+B,MAAA,QAAAA,MAAA,MAAAC,MAAA,IA2BwB5B,KAAA,CAAA6B,UAAU,GAAAD,MAAA;IAAGE,OAAK,EAAAH,MAAA,QAAAA,MAAA,MA3B1CI,SAAA,KAAAC,IAAA,KA2BkD3B,QAAA,CAAA4B,WAAA,IAAA5B,QAAA,CAAA4B,WAAA,IAAAD,IAAA,CAAW;IAC9CE,WAAW,EAAC;iEADHlC,KAAA,CAAA6B,UAAU,E,GAE1BjC,mBAAA,CAAwC;IAA/BuC,OAAK,EAAAR,MAAA,QAAAA,MAAA,UAAAK,IAAA,KAAE3B,QAAA,CAAA4B,WAAA,IAAA5B,QAAA,CAAA4B,WAAA,IAAAD,IAAA,CAAW;KAAE,IAAE,E,sBAInCtC,mBAAA,CAEM,OAFN0C,UAEM,EAF0B,aAEhC,G","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}