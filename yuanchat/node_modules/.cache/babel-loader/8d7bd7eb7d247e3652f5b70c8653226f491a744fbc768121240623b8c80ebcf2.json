{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { useStore } from 'vuex';\nimport NIM from 'nim-web-sdk-ng';\nimport dayjs from 'dayjs';\nexport default {\n  name: 'ConversationList',\n  data() {\n    return {\n      conversationList: [],\n      // 存储会话列表数据\n      syncFinish: false,\n      nim: null,\n      selectedConversation: null,\n      currentMessages: [],\n      newMessage: ''\n    };\n  },\n  mounted() {\n    const store = useStore();\n    this.nim = store.state.nim;\n    if (!this.nim) {\n      const nimConfig = this.$store.state.nimConfig;\n      console.log(`=== NIM 初始化配置 ${nimConfig}`);\n      this.nim = NIM.getInstance({\n        appkey: nimConfig[0],\n        debugLevel: \"debug\",\n        apiVersion: \"v2\"\n      });\n      if (this.nim) {\n        this.$store.commit('setNim', this.nim);\n        console.log('=== NIM 已初始化');\n        if (this.nim.V2NIMLoginService) {\n          this.nim.V2NIMLoginService.login(nimConfig[1], nimConfig[2], {\n            \"forceMode\": false\n          }).then(() => {\n            console.log('=== 登录成功');\n          }).catch(err => {\n            console.error('=== 登录失败:', err);\n          });\n        }\n      }\n    } else {\n      console.log('=== NIM 不需要初始化');\n    }\n    this.nim.V2NIMConversationService.on(\"onSyncFinished\", () => {\n      console.log('=== NIM 同步完成');\n      this.syncFinish = true;\n      this.getConversationList();\n    });\n  },\n  methods: {\n    async getConversationList() {\n      console.log('=== NIM 获取会话列表');\n      try {\n        const result = await this.nim.V2NIMConversationService.getConversationList(0, 100);\n        if (result) {\n          this.conversationList = result.conversationList;\n          for (let index = 0; index < result.conversationList.length; index++) {\n            const element = result.conversationList[index];\n            console.log(`=== ${element.name}`);\n          }\n        }\n      } catch (err) {\n        console.error(`=== 获取最近会话列表失败: ${err} ==`);\n      }\n    },\n    getAvatar(conversation) {\n      if (conversation.avatar) {\n        return conversation.avatar;\n      }\n      const initials = conversation.name.slice(0, 2).toUpperCase();\n      const canvas = document.createElement('canvas');\n      canvas.width = 40;\n      canvas.height = 40;\n      const ctx = canvas.getContext('2d');\n      ctx.fillStyle = '#ccc';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n      ctx.font = '20px Arial';\n      ctx.fillStyle = '#fff';\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      ctx.fillText(initials, canvas.width / 2, canvas.height / 2);\n      return canvas.toDataURL();\n    },\n    async loadMessages(conversation) {\n      try {\n        const result = await this.nim.V2NIMMessageService.queryMessageList({\n          sessionId: conversation.sessionId,\n          sessionType: conversation.sessionType,\n          limit: 100\n        });\n        this.currentMessages = result.messageList.map(msg => ({\n          content: msg.content,\n          timestamp: msg.timestamp,\n          isOutgoing: msg.isOutgoing\n        }));\n      } catch (err) {\n        console.error('加载消息失败:', err);\n      }\n    },\n    sendMessage() {\n      if (!this.newMessage.trim()) return;\n      const message = {\n        sessionId: this.selectedConversation.sessionId,\n        sessionType: this.selectedConversation.sessionType,\n        content: this.newMessage,\n        timestamp: Date.now(),\n        isOutgoing: true\n      };\n\n      // 调用SDK发送消息\n      this.nim.V2NIMMessageService.sendMessage(message);\n\n      // 本地临时显示\n      this.currentMessages.push(message);\n      this.newMessage = '';\n    },\n    formatTime(timestamp) {\n      return dayjs(timestamp).format('HH:mm');\n    }\n  }\n};","map":{"version":3,"names":["useStore","NIM","dayjs","name","data","conversationList","syncFinish","nim","selectedConversation","currentMessages","newMessage","mounted","store","state","nimConfig","$store","console","log","getInstance","appkey","debugLevel","apiVersion","commit","V2NIMLoginService","login","then","catch","err","error","V2NIMConversationService","on","getConversationList","methods","result","index","length","element","getAvatar","conversation","avatar","initials","slice","toUpperCase","canvas","document","createElement","width","height","ctx","getContext","fillStyle","fillRect","font","textAlign","textBaseline","fillText","toDataURL","loadMessages","V2NIMMessageService","queryMessageList","sessionId","sessionType","limit","messageList","map","msg","content","timestamp","isOutgoing","sendMessage","trim","message","Date","now","push","formatTime","format"],"sources":["/Users/yaoxiao/Desktop/Trae/my-vue-app/src/components/ConversationList.vue"],"sourcesContent":["<template>\n  <div class=\"conversation-list-container\">\n    <h1>最近会话</h1>\n    <ul>\n      <!-- 渲染会话列表 -->\n      <li v-for=\"conversation in conversationList\" :key=\"conversation.id\" \n          @click=\"selectedConversation = conversation; loadMessages(conversation)\">\n        <!-- 显示头像 -->\n        <img :src=\"getAvatar(conversation)\" alt=\"Avatar\" class=\"avatar\">\n        {{ conversation.name }}\n      </li>\n    </ul>\n  </div>\n  \n  <!-- 新增消息详情区域 -->\n  <div class=\"message-detail-container\">\n    <div v-if=\"selectedConversation\" class=\"message-area\">\n      <!-- 消息历史 -->\n      <div class=\"message-history\">\n        <div v-for=\"(message, index) in currentMessages\" :key=\"index\" \n             class=\"message-bubble\" :class=\"{ 'my-message': message.isOutgoing }\">\n          <div class=\"message-content\">{{ message.content }}</div>\n          <div class=\"message-time\">{{ formatTime(message.timestamp) }}</div>\n        </div>\n      </div>\n      \n      <!-- 消息发送框 -->\n      <div class=\"message-input-area\">\n        <input v-model=\"newMessage\" @keyup.enter=\"sendMessage\" \n               placeholder=\"输入消息...\">\n        <button @click=\"sendMessage\">发送</button>\n      </div>\n    </div>\n    \n    <div v-else class=\"empty-state\">\n      请选择会话开始聊天\n    </div>\n  </div>\n</template>\n\n<script>\nimport { useStore } from 'vuex';\nimport NIM from 'nim-web-sdk-ng';\nimport dayjs from 'dayjs'\n\nexport default {\n  name: 'ConversationList',\n  data() {\n    return {\n      conversationList: [], // 存储会话列表数据\n      syncFinish: false,\n      nim: null,\n      selectedConversation: null,\n      currentMessages: [],\n      newMessage: ''\n    };\n  },\n  mounted() {\n    const store = useStore();\n    this.nim = store.state.nim;\n\n    if (!this.nim) {\n      const nimConfig = this.$store.state.nimConfig;\n      console.log(`=== NIM 初始化配置 ${nimConfig}`);\n      this.nim = NIM.getInstance({\n        appkey: nimConfig[0],\n        debugLevel: \"debug\",\n        apiVersion: \"v2\"\n      });\n      if (this.nim) {\n        this.$store.commit('setNim', this.nim);\n        console.log('=== NIM 已初始化');\n        if (this.nim.V2NIMLoginService) {\n          this.nim.V2NIMLoginService.login(nimConfig[1], nimConfig[2], {\n            \"forceMode\": false\n          }).then(() => {\n            console.log('=== 登录成功');\n          }).catch((err) => {\n            console.error('=== 登录失败:', err);\n          });\n        }\n\n      }\n    } else {\n      console.log('=== NIM 不需要初始化');\n    }\n    this.nim.V2NIMConversationService.on(\"onSyncFinished\", () => {\n      console.log('=== NIM 同步完成');\n      this.syncFinish = true;\n      this.getConversationList();\n    });\n  },\n  methods: {\n    async getConversationList() {\n      console.log('=== NIM 获取会话列表');\n      try {\n        const result = await this.nim.V2NIMConversationService.getConversationList(0, 100);\n        if (result) {\n          this.conversationList = result.conversationList;\n          for (let index = 0; index < result.conversationList.length; index++) {\n            const element = result.conversationList[index];\n            console.log(`=== ${element.name}`);\n          }\n        }\n      } catch (err) {\n        console.error(`=== 获取最近会话列表失败: ${err} ==`);\n      }\n    },\n\n    getAvatar(conversation) {\n      if (conversation.avatar) {\n        return conversation.avatar;\n      }\n      const initials = conversation.name.slice(0, 2).toUpperCase();\n      const canvas = document.createElement('canvas');\n      canvas.width = 40;\n      canvas.height = 40;\n      const ctx = canvas.getContext('2d');\n      ctx.fillStyle = '#ccc';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n      ctx.font = '20px Arial';\n      ctx.fillStyle = '#fff';\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      ctx.fillText(initials, canvas.width / 2, canvas.height / 2);\n      return canvas.toDataURL();\n    },\n    \n    async loadMessages(conversation) {\n      try {\n        const result = await this.nim.V2NIMMessageService.queryMessageList({\n          sessionId: conversation.sessionId,\n          sessionType: conversation.sessionType,\n          limit: 100\n        });\n        this.currentMessages = result.messageList.map(msg => ({\n          content: msg.content,\n          timestamp: msg.timestamp,\n          isOutgoing: msg.isOutgoing\n        }));\n      } catch (err) {\n        console.error('加载消息失败:', err);\n      }\n    },\n    \n    sendMessage() {\n      if (!this.newMessage.trim()) return;\n      \n      const message = {\n        sessionId: this.selectedConversation.sessionId,\n        sessionType: this.selectedConversation.sessionType,\n        content: this.newMessage,\n        timestamp: Date.now(),\n        isOutgoing: true\n      }\n      \n      // 调用SDK发送消息\n      this.nim.V2NIMMessageService.sendMessage(message);\n      \n      // 本地临时显示\n      this.currentMessages.push(message);\n      this.newMessage = '';\n    },\n    \n    formatTime(timestamp) {\n      return dayjs(timestamp).format('HH:mm');\n    }\n  }\n}\n</script>\n\n<style scoped>\n/* 会话列表容器样式 */\n.conversation-list-container {\n  width: 33.33%; /* 占页面宽度的三分之一 */\n  float: left; /* 左浮动，使其他内容可以在右侧显示 */\n  box-sizing: border-box; /* 确保内边距和边框不会增加元素的实际宽度 */\n  padding: 10px; /* 可根据需要调整内边距 */\n}\n\n/* 头像样式 */\n.avatar {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  margin-right: 10px;\n  vertical-align: middle;\n}\n\n/* 全局样式 */\nbody {\n  font-family: Arial, sans-serif;\n}\n\n/* 标题样式 */\nh1 {\n  color: #333;\n  text-align: center;\n  margin-bottom: 20px;\n}\n\n/* 列表样式 */\nul {\n  list-style-type: none;\n  padding: 0;\n  margin: 0;\n}\n\n/* 列表项样式 */\nli {\n  padding: 15px;\n  border-bottom: 1px solid #e0e0e0;\n  text-align: left;\n  color: #333;\n  background-color: #f9f9f9;\n  transition: background-color 0.3s ease;\n}\n\n/* 鼠标悬停效果 */\nli:hover {\n  background-color: #e9e9e9;\n}\n\n/* 新增消息区域样式 */\n.message-detail-container {\n  width: 66.66%;\n  float: left;\n  height: 100vh;\n  background: #fff;\n  border-left: 1px solid #e0e0e0;\n}\n\n.message-history {\n  height: calc(100vh - 120px);\n  overflow-y: auto;\n  padding: 20px;\n}\n\n.message-bubble {\n  margin: 10px 0;\n  max-width: 70%;\n  padding: 12px 16px;\n  border-radius: 18px;\n  background: #f1f0f0;\n}\n\n.my-message {\n  margin-left: auto;\n  background: #0084ff;\n  color: white;\n}\n\n.message-content {\n  word-break: break-word;\n}\n\n.message-time {\n  font-size: 12px;\n  color: #666;\n  margin-top: 4px;\n}\n\n.message-input-area {\n  padding: 20px;\n  display: flex;\n  gap: 10px;\n  border-top: 1px solid #eee;\n  \n  input {\n    flex: 1;\n    padding: 12px;\n    border: 1px solid #ddd;\n    border-radius: 20px;\n  }\n  \n  button {\n    padding: 12px 24px;\n    background: #0084ff;\n    color: white;\n    border: none;\n    border-radius: 20px;\n    cursor: pointer;\n  }\n}\n\n.empty-state {\n  display: flex;\n  height: 100%;\n  align-items: center;\n  justify-content: center;\n  color: #999;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}