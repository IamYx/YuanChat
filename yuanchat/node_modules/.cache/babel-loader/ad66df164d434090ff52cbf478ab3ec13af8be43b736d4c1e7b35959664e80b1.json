{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_cache[0] || (_cache[0] = _createElementVNode(\"h1\", null, \"会话列表页面\", -1 /* HOISTED */)), _createElementVNode(\"ul\", null, [_createCommentVNode(\" 渲染会话列表 \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.conversationList, conversation => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: conversation.id\n    }, _toDisplayString(conversation.name), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["_createElementBlock","_createElementVNode","_createCommentVNode","_Fragment","_renderList","$data","conversationList","conversation","key","id","name"],"sources":["/Users/yaoxiao/Desktop/Trae/my-vue-app/src/components/ConversationList.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>会话列表页面</h1>\n    <ul>\n      <!-- 渲染会话列表 -->\n      <li v-for=\"conversation in conversationList\" :key=\"conversation.id\">\n        {{ conversation.name }}\n      </li>\n    </ul>\n  </div>\n</template>\n\n<script>\nimport { useStore } from 'vuex';\nimport NIM from 'nim-web-sdk-ng';\n\nexport default {\n  name: 'ConversationList',\n  data() {\n    return {\n      conversationList: [], // 存储会话列表数据\n      syncFinish: false,\n      nim: null\n    };\n  },\n  mounted() {\n    const store = useStore();\n    this.nim = store.state.nim;\n\n    if (this.nim) {\n      this.nim.V2NIMConversationService.on(\"onSyncFinished\", () => {\n        console.log('=== NIM 同步完成');\n        this.syncFinish = true;\n        this.getConversationList();\n      });\n    } else {\n      console.error('=== NIM 实例未初始化');\n    }\n  },\n  methods: {\n    async getConversationList() {\n      console.log('=== NIM 获取会话列表');\n      try {\n        const result = await this.nim.V2NIMConversationService.getConversationList(0, 100);\n        if (result) {\n          this.conversationList = result.conversationList;\n          for (let index = 0; index < result.conversationList.length; index++) {\n            const element = result.conversationList[index];\n            console.log(`=== ${element.name}`);\n          }\n        }\n      } catch (err) {\n        console.error(`=== 获取最近会话列表失败: ${err} ==`);\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n/* 全局样式 */\nbody {\n  font-family: Arial, sans-serif;\n}\n\n/* 标题样式 */\nh1 {\n  color: #333;\n  text-align: center;\n  margin-bottom: 20px;\n}\n\n/* 列表样式 */\nul {\n  list-style-type: none;\n  padding: 0;\n  margin: 0;\n}\n\n/* 列表项样式 */\nli {\n  padding: 15px;\n  border-bottom: 1px solid #e0e0e0;\n  text-align: left;\n  color: #333;\n  background-color: #f9f9f9;\n  transition: background-color 0.3s ease;\n}\n\n/* 鼠标悬停效果 */\nli:hover {\n  background-color: #e9e9e9;\n}\n</style>"],"mappings":";;uBACEA,mBAAA,CAQM,c,0BAPJC,mBAAA,CAAe,YAAX,QAAM,sBACVA,mBAAA,CAKK,aAJHC,mBAAA,YAAe,G,kBACfF,mBAAA,CAEKG,SAAA,QAPXC,WAAA,CAKiCC,KAAA,CAAAC,gBAAgB,EAAhCC,YAAY;yBAAvBP,mBAAA,CAEK;MAFyCQ,GAAG,EAAED,YAAY,CAACE;wBAC3DF,YAAY,CAACG,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}